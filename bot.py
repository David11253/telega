import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather
TOKEN = "7853088639:AAH4geavCVFAqCJkbYJ0P-1xpwaiDYPq67I"
GROUP_ID = -1002428849357  # ID –≥—Ä—É–ø–ø—ã, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∏

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
class Form(StatesGroup):
    nickname = State()
    platform = State()
    server = State()
    redstone = State()
    pvp_pve = State()
    hours = State()
    study_time = State()
    teammates = State()
    country = State()
    age = State()
    internet = State()

# –•—Ä–∞–Ω–µ–Ω–∏–µ ID –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
polls = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer("–ö–æ–º–∞–Ω–¥—ã:\n/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/inteam - –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ")

# –ö–æ–º–∞–Ω–¥–∞ /inteam (–Ω–∞—á–∞–ª–æ –∞–Ω–∫–µ—Ç—ã)
@dp.message(Command("inteam"))
async def start_form(message: types.Message, state: FSMContext):
    await message.answer("‚úè –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:")
    await state.set_state(Form.nickname)

@dp.message(Form.nickname)
async def process_nickname(message: types.Message, state: FSMContext):
    await state.update_data(nickname=message.text)
    await message.answer("–í—ã –∏–≥—Ä–∞–µ—Ç–µ –Ω–∞ –ü–ö –∏–ª–∏ –º–æ–±–∏–ª—å–Ω–æ–º? (–ü–ö/–ú–±)")
    await state.set_state(Form.platform)

@dp.message(Form.platform)
async def process_platform(message: types.Message, state: FSMContext):
    await state.update_data(platform=message.text)
    await message.answer("–ù–∞ –∫–∞–∫–æ–º —Å–µ—Ä–≤–µ—Ä–µ –∏–≥—Ä–∞–µ—Ç–µ?")
    await state.set_state(Form.server)

@dp.message(Form.server)
async def process_server(message: types.Message, state: FSMContext):
    await state.update_data(server=message.text)
    await message.answer("–ö–∞–∫ —Ö–æ—Ä–æ—à–æ –≤—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ —Ä–µ–¥—Å—Ç–æ—É–Ω? (1-10)")
    await state.set_state(Form.redstone)

@dp.message(Form.redstone)
async def process_redstone(message: types.Message, state: FSMContext):
    await state.update_data(redstone=message.text)
    await message.answer("–í—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –ü–í–ü –∏–ª–∏ –ü–í–ï?")
    await state.set_state(Form.pvp_pve)

@dp.message(Form.pvp_pve)
async def process_pvp_pve(message: types.Message, state: FSMContext):
    await state.update_data(pvp_pve=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å –≤—ã –∏–≥—Ä–∞–µ—Ç–µ? (–ü—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä–∞)")
    await state.set_state(Form.hours)

@dp.message(Form.hours)
async def process_hours(message: types.Message, state: FSMContext):
    await state.update_data(hours=message.text)
    await message.answer("–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å? (–ù–∞–ø—Ä–∏–º–µ—Ä, 8:00-13:00 –ø–æ –ú–°–ö)")
    await state.set_state(Form.study_time)

@dp.message(Form.study_time)
async def process_study_time(message: types.Message, state: FSMContext):
    await state.update_data(study_time=message.text)
    await message.answer("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Ç–∏–º–º–µ–π—Ç—ã? (–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ '–Ω–µ—Ç')")
    await state.set_state(Form.teammates)

@dp.message(Form.teammates)
async def process_teammates(message: types.Message, state: FSMContext):
    await state.update_data(teammates=message.text)
    await message.answer("–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –≤—ã –∂–∏–≤—ë—Ç–µ?")
    await state.set_state(Form.country)

@dp.message(Form.country)
async def process_country(message: types.Message, state: FSMContext):
    await state.update_data(country=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    await state.set_state(Form.age)

@dp.message(Form.age)
async def process_age(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç (–æ—Ç 1 –¥–æ 10)")
    await state.set_state(Form.internet)

@dp.message(Form.internet)
async def process_internet(message: types.Message, state: FSMContext):
    data = await state.update_data(internet=message.text)

    if "–º–µ—Ä–∫" in data["server"].lower() or "–º–µ—Ä–∫—É—Ä–∏–π" in data["server"].lower():
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –≥—Ä—É–ø–ø—É
        text = (
            "üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ!\n\n"
            f"–ù–∏–∫–Ω–µ–π–º: {data['nickname']}\n"
            f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {data['platform']}\n"
            f"–°–µ—Ä–≤–µ—Ä: {data['server']}\n"
            f"–†–µ–¥—Å—Ç–æ—É–Ω: {data['redstone']}/10\n"
            f"–ü–í–ü/–ü–í–ï: {data['pvp_pve']}\n"
            f"–ß–∞—Å—ã –≤ –¥–µ–Ω—å: {data['hours']}\n"
            f"–í—Ä–µ–º—è –±–µ–∑ –∏–≥—Ä—ã: {data['study_time']}\n"
            f"–¢–∏–º–º–µ–π—Ç—ã: {data['teammates']}\n"
            f"–°—Ç—Ä–∞–Ω–∞: {data['country']}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
            f"–ò–Ω—Ç–µ—Ä–Ω–µ—Ç: {data['internet']}/10\n\n"
            "–ü—Ä–∏–Ω–∏–º–∞–µ–º –≤ –∫–æ–º–∞–Ω–¥—É?"
        )

        poll_message = await bot.send_poll(
            chat_id=GROUP_ID,
            question="–ü—Ä–∏–Ω–∏–º–∞–µ–º –≤ –∫–æ–º–∞–Ω–¥—É?",
            options=["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"],
            is_anonymous=False
        )

        polls[poll_message.poll.id] = {
            "message_id": poll_message.message_id,
            "user_data": data
        }

        asyncio.create_task(check_poll_result(poll_message.poll.id))

        await message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ! –ñ–¥–∏—Ç–µ 24 —á–∞—Å–∞.")
    else:
        await message.answer("–í—ã –Ω–µ –ø—Ä–∏–Ω—è—Ç—ã –∏–∑-–∑–∞ —Å–µ—Ä–≤–µ—Ä–∞.")
    
    await state.clear()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
async def check_poll_result(poll_id):
    await asyncio.sleep(86400)  # –ñ–¥—ë–º 24 —á–∞—Å–∞

    if poll_id in polls:
        poll_info = polls[poll_id]
        message_id = poll_info["message_id"]
        user_data = poll_info["user_data"]

        try:
            poll_results = await bot.stop_poll(GROUP_ID, message_id)

            yes_votes = poll_results.options[0].voter_count
            no_votes = poll_results.options[1].voter_count

            if yes_votes > no_votes:
                await bot.send_message(GROUP_ID, f"‚úÖ {user_data['nickname']} –ø—Ä–∏–Ω—è—Ç –≤ –∫–æ–º–∞–Ω–¥—É!")
            else:
                await bot.send_message(GROUP_ID, f"‚ùå {user_data['nickname']} –Ω–µ –ø—Ä–∏–Ω—è—Ç –≤ –∫–æ–º–∞–Ω–¥—É.")
            
            del polls[poll_id]

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
